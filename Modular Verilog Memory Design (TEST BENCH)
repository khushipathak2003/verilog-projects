
// TEST BENCH

`timescale 1ns / 1ps
module ram_rom_tb;

	// Inputs
	reg [3:0] data_in;
	reg clk;
	reg mode;
	reg we;
	reg reset;
	reg [3:0] addr;

	// Outputs
	wire [3:0] out;

	// Instantiate the Unit Under Test (UUT)
	ram_rom uut (
		.data_in(data_in), 
		.clk(clk), 
		.mode(mode), 
		.we(we), 
		.reset(reset), 
		.addr(addr), 
		.out(out)
	);
	initial begin
	$dumpfile("dump.vcd");
	$dumpvars(1,ram_rom_tb);
	
	// Clock generation
	clk = 1'b1;
    forever #5 clk = ~clk;
	 end

    initial begin
        // Initialize signals
        reset = 1;
        addr = 0;
        data_in = 0;
        we = 0;
        mode = 0;

        // Reset pulse
        #10;
        reset = 0;
		  // ROM mode
        mode = 0;
        addr = 0;
        #10;
        $display("ROM Read [0]: %h", out);
        addr = 1;
        #10;
        $display("ROM Read [1]: %h", out);
        addr = 2;
        #10;
        $display("ROM Read [2]: %h", out);
        addr = 3;
        #10;
        $display("ROM Read [3]: %h", out);
		  // RAM mode
        mode = 1;
        we = 1;
        addr = 4;
        data_in = 8'd14;
        #10;
        addr = 5;
        data_in = 8'd15;
        #10;
        addr = 6;
        data_in = 8'd13;
        #10;
        addr = 7;
        data_in = 8'd10;
        #10;
		  we = 0;
        addr = 4;
        #10;
        $display("RAM Read [4]: %h", out);
        addr = 5;
        #10;
        $display("RAM Read [5]: %h", out);
        addr = 6;
        #10;
        $display("RAM Read [6]: %h", out);
        addr = 7;
        #10;
        $display("RAM Read [7]: %h", out);

        $finish;
    end
 endmodule
